rec
{
    const (x : int) : stream int =
          x :: (const x) by `0(1);
}

rec
{
    map (f : int -> int) ((x :: xs) : stream int) : stream int =
        f x :: (map f xs) by `0(1)
}

{
    zero = const 0
}

{
    one = map (λ (x : int) ⇒ x + 1) zero
}

rec
{
    nat : stream int =
        0 :: (map (λ (x : int) ⇒ x + 1) nat) by `0(1);
}

extern not : `(ω) ⊛ (bool → bool)

rec
{
    h ((x :: xs) : stream bool) : `(2) ⊛ stream bool =
      (x :: (not x :: ys) by `0(1)) by `(2)
      where { ys = (h xs) by `0(1) }
}

extern tail : `(ω) ⊛ (stream bool → `0(1) ⊛ stream bool)

rec
{
    thuemorse : stream bool =
        false :: (tail ys) by `0(2)
        where { ys = (h thuemorse) by `0(1) };
}

extern incr : stream int -> stream int

rec
{
    nat : `(1 0) ⊛ stream int = (0 :: pos) by `(1 0);
    pos : `(0 1) ⊛ stream int = (incr nat) by `(0 1);
}
